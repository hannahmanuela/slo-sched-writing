
@inproceedings{TODO,
    author = {TODO},
    title = {TODO},
    year = {2020},
}

@inproceedings {caladan,
    author = {Joshua Fried and Zhenyuan Ruan and Amy Ousterhout and Adam Belay},
    title = {Caladan: Mitigating Interference at Microsecond Timescales},
    booktitle = {14th USENIX Symposium on Operating Systems Design and Implementation (OSDI 20)},
    year = {2020},
    isbn = {978-1-939133-19-9},
    url = {https://www.usenix.org/conference/osdi20/presentation/fried},
    publisher = {USENIX Association},
    month = nov
}

@misc{aws-ec2-resources,
  author = {AWS},
  howpublished = {online},
  url = {https://aws.amazon.com/ec2/instance-types/},
  title = {Amazon EC2 Instance types}
}

@misc{kubernetes-resources,
  author = {Kubernetes},
  howpublished = {online},
  url = {https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/},
  title = {Resource Management for Pods and Containers}
}

@inproceedings{borg,
    title	= {Borg: the Next Generation},
    author	= {Muhammad Tirmazi and Adam Barker and Nan Deng and Md Ehtesam Haque and Zhijing Gene Qin and Steven Hand and Mor Harchol-Balter and John Wilkes},
    year	= {2020},
    booktitle	= {EuroSys'20},
    address	= {Heraklion, Crete}
}

@inproceedings {nu,
    author = {Zhenyuan Ruan and Seo Jin Park and Marcos K. Aguilera and Adam Belay and Malte Schwarzkopf},
    title = {Nu: Achieving {Microsecond-Scale} Resource Fungibility with Logical Processes},
    booktitle = {20th USENIX Symposium on Networked Systems Design and Implementation (NSDI 23)},
    year = {2023},
    isbn = {978-1-939133-33-5},
    address = {Boston, MA},
    pages = {1409--1427},
    url = {https://www.usenix.org/conference/nsdi23/presentation/ruan},
    publisher = {USENIX Association},
    month = apr
}

@misc{oci-cgroups,
  author = {opencontainers},
  howpublished = {github},
  url = {https://github.com/opencontainers/runtime-spec/blob/main/config-linux.md},
  title = {config-linux.md: Linux Container Configuration}
}

@misc{docker-docs-cgroups,
  author = {Docker},
  howpublished = {online},
  url = {https://docs.docker.com/engine/containers/resource_constraints/},
  title = {dockerdocs: Resource constraints},
}

@misc{container-isolation-article,
  author = {Rory McClune},
  howpublished = {online},
  url = {https://www.aquasec.com/blog/container-isolation-techniques/},
  title = {How Do Containers Contain? Container Isolation Techniques},
  year = {2021}
}

@inproceedings {afaas,
    author = {Xiaohu Chai and Tianyu Zhou and Keyang Hu and Jianfeng Tan and Tiwei Bie and Anqi Shen and Dawei Shen and Qi Xing and Shun Song and Tongkai Yang and Le Gao and Feng Yu and Zhengyu He and Dong Du and Yubin Xia and Kang Chen and Yu Chen},
    title = {Fork in the Road: Reflections and Optimizations for Cold Start Latency in Production Serverless Systems},
    booktitle = {20th USENIX Symposium on Networked Systems Design and Implementation (NSDI 23)},
    year = {2025},
    address = {Boston, MA},
    url = {https://www.usenix.org/system/files/osdi25-chai-xiaohu.pdf},
    publisher = {USENIX Association},
}

@misc{libvirt-cgroups,
  author = {libvirt Documentation},
  howpublished = {online},
  url = {https://libvirt.org/formatdomain.html#cpu-allocation},
  title = {CPU Allocation}
}

@misc{firecracker-cgroups,
  author = {firecracker},
  howpublished = {github},
  url = {https://github.com/firecracker-microvm/firecracker/blob/main/docs/prod-host-setup.md},
  title = {config-linux.md: Production Host Setup Recommendations}
}

@misc{cgroups-kerneldocs,
  author = {Tejun Heo},
  howpublished = {online},
  url = {https://docs.kernel.org/admin-guide/cgroup-v2.html#weights},
  title = {docs.kernel.org: Control Group v2},
  year = {2015}
}

@inproceedings{sigmaos,
    author = {Szekely, Ariel and Belay, Adam and Morris, Robert and Kaashoek, M. Frans},
    title = {Unifying serverless and microservice workloads with SigmaOS},
    year = {2024},
    isbn = {9798400712517},
    publisher = {Association for Computing Machinery},
    address = {New York, NY, USA},
    url = {https://doi.org/10.1145/3694715.3695947},
    doi = {10.1145/3694715.3695947},
    abstract = {Many cloud applications use both serverless functions, for bursts of stateless parallel computation, and container orchestration, for long-running microservices and tasks that need to interact. Ideally a single platform would offer the union of these systems' capabilities, but neither is sufficient to act as that single platform: serverless functions are lightweight but cannot act as servers with long-term state, while container orchestration offers general-purpose computation but instance start-up takes too long to support burst parallelism.SigmaOS is a new multi-tenant cloud operating system that combines the best of container orchestration and serverless in one platform with one API. SigmaOS computations, called procs, can be long-running, stateful, and interact with each other, making them a good match for both serverless and microservice tasks. A key aspect of the SigmaOS design is its cloud-centric API, which provides flexible management of computation, a novel abstraction for communication endpoints, SigmaEPs---which allow procs of a tenant to communicate efficiently but prohibits procs from sending packets to other tenants---and a flexible naming system to name, for example, SigmaEPs.Quick proc start-up is important for serverless uses. A key enabling observation is that both serverless and microservice applications rely on cloud services for much of the work traditionally done by the local OS (e.g., access to durable storage and additional compute resources). SigmaOS exploits this observation by providing only a small and generic local operating system image to each proc, which can be created much more quickly than a container orchestration instance since SigmaOS need not install application-specific filesystem content or (due to SigmaOS's SigmaEPs) configure an isolated overlay network.Microbenchmarks show that SigmaOS can cold start a proc in 7.7 msec and can create 36,650 procs per second, distributing them over a 24-machine cluster. An evaluation of SigmaOS with two microservice applications from DeathStarBench, a MapReduce application, and an image processing benchmark, shows that the SigmaOS API supports both microservices and lambda-style computations, and provides better performance than corresponding versions on AWS Lambda and Kubernetes.},
    booktitle = {Proceedings of the ACM SIGOPS 30th Symposium on Operating Systems Principles},
    pages = {385-402},
    numpages = {18},
    location = {Austin, TX, USA},
    series = {SOSP '24}
}

@misc{fixing-idle-article,
  author = {Viresh Kumar},
  howpublished = {online},
  url = {https://lwn.net/Articles/805317/},
  title = {Fixing SCHED\_IDLE},
  year = {2019}
}


@misc{weight-idleprio,
  author = {Linux source code},
  howpublished = {source code},
  url = {https://elixir.bootlin.com/linux/v6.14.2/source/kernel/sched/sched.h#L2346},
  title = {sched.h}
}

@misc{overprovision,
  title = {Overprovisioning in AWS? Cost-control tools and strategies can help},
  author = {Will Kelly},
  howpublished = {online},
  url = {https://www.techtarget.com/searchaws/news/2240209793/Overprovisioning-in-AWS-Cost-control-tools-and-strategies-can-help},
  year = {2013}
}

@misc{lkml-idle-cgroup,
  author = {Josh Don},
  howpublished = {online},
  url = {https://lore.kernel.org/all/162971078674.25758.15464079371945307825.tip-bot2@tip-bot2/},
  title = {sched: Cgroup SCHED\_IDLE support},
  year = {2021}
}

@misc{lkml-deadline-srv,
  author = {Peter Zijlstra},
  howpublished = {online},
  url = {https://lore.kernel.org/lkml/20200807095051.385985-5-juri.lelli@redhat.com/},
  title = {sched/deadline: Introduce deadline servers},
  year = {2020}
}

@misc{schedviz-tool,
  author = {Google Open Source Blog},
  url = {https://opensource.googleblog.com/2019/10/understanding-scheduling-behavior-with.html},
  howpublished = {online},
  title = { Understanding Scheduling Behavior with SchedViz },
  year = {2019}
}

@book{in-the-plex,
  author = { Steven Levy },
  publisher = { Simon \& Schuster },
  title = {In the Plex: How Google Thinks, Works, and Shapes Our Lives},
  year = {2011},
  pages = {186+},
}

@inproceedings{wasted-cores,
author = {Lozi, Jean-Pierre and Lepers, Baptiste and Funston, Justin and Gaud, Fabien and Qu\'{e}ma, Vivien and Fedorova, Alexandra},
title = {The Linux scheduler: a decade of wasted cores},
year = {2016},
isbn = {9781450342407},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2901318.2901326},
doi = {10.1145/2901318.2901326},
abstract = {As a central part of resource management, the OS thread scheduler must maintain the following, simple, invariant: make sure that ready threads are scheduled on available cores. As simple as it may seem, we found that this invariant is often broken in Linux. Cores may stay idle for seconds while ready threads are waiting in runqueues. In our experiments, these performance bugs caused many-fold performance degradation for synchronization-heavy scientific applications, 13\% higher latency for kernel make, and a 14-23\% decrease in TPC-H throughput for a widely used commercial database. The main contribution of this work is the discovery and analysis of these bugs and providing the fixes. Conventional testing techniques and debugging tools are ineffective at confirming or understanding this kind of bugs, because their symptoms are often evasive. To drive our investigation, we built new tools that check for violation of the invariant online and visualize scheduling activity. They are simple, easily portable across kernel versions, and run with a negligible overhead. We believe that making these tools part of the kernel developers' tool belt can help keep this type of bug at bay.},
booktitle = {Proceedings of the Eleventh European Conference on Computer Systems},
articleno = {1},
numpages = {16},
location = {London, United Kingdom},
series = {EuroSys '16}
}



@inproceedings{ghost,
author = {Humphries, Jack Tigar and Natu, Neel and Chaugule, Ashwin and Weisse, Ofir and Rhoden, Barret and Don, Josh and Rizzo, Luigi and Rombakh, Oleg and Turner, Paul and Kozyrakis, Christos},
title = {ghOSt: Fast \& Flexible User-Space Delegation of Linux Scheduling},
year = {2021},
isbn = {9781450387095},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3477132.3483542},
doi = {10.1145/3477132.3483542},
abstract = {We present ghOSt, our infrastructure for delegating kernel scheduling decisions to userspace code. ghOSt is designed to support the rapidly evolving needs of our data center workloads and platforms.Improving scheduling decisions can drastically improve the throughput, tail latency, scalability, and security of important workloads. However, kernel schedulers are difficult to implement, test, and deploy efficiently across a large fleet. Recent research suggests bespoke scheduling policies, within custom data plane operating systems, can provide compelling performance results in a data center setting. However, these gains have proved difficult to realize as it is impractical to deploy a custom OS image(s) at an application granularity, particularly in a multi-tenant environment, limiting the practical applications of these new techniques.ghOSt provides general-purpose delegation of scheduling policies to userspace processes in a Linux environment. ghOSt provides state encapsulation, communication, and action mechanisms that allow complex expression of scheduling policies within a userspace agent, while assisting in synchronization. Programmers use any language to develop and optimize policies, which are modified without a host reboot. ghOSt supports a wide range of scheduling models, from per-CPU to centralized, run-to-completion to preemptive, and incurs low overheads for scheduling actions. We demonstrate ghOSt's performance on both academic and real-world workloads, including Google Snap and Google Search. We show that by using ghOSt instead of the kernel scheduler, we can quickly achieve comparable throughput and latency while enabling policy optimization, non-disruptive upgrades, and fault isolation for our data center workloads. We open-source our implementation to enable future research and development based on ghOSt.},
booktitle = {Proceedings of the ACM SIGOPS 28th Symposium on Operating Systems Principles},
pages = {588-604},
numpages = {17},
keywords = {thread scheduling, Operating systems},
location = {Virtual Event, Germany},
series = {SOSP '21}
}

@inproceedings{syrup,
author = {Kaffes, Kostis and Humphries, Jack Tigar and Mazi\`{e}res, David and Kozyrakis, Christos},
title = {Syrup: User-Defined Scheduling Across the Stack},
year = {2021},
isbn = {9781450387095},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3477132.3483548},
doi = {10.1145/3477132.3483548},
abstract = {Suboptimal scheduling decisions in operating systems, networking stacks, and application runtimes are often responsible for poor application performance, including higher latency and lower throughput. These poor decisions stem from a lack of insight into the applications and requests the scheduler is handling and a lack of coherence and coordination between the various layers of the stack, including NICs, kernels, and applications.We propose Syrup, a framework for user-defined scheduling. Syrup enables untrusted application developers to express application-specific scheduling policies across these system layers without being burdened with the low-level system mechanisms that implement them. Application developers write a scheduling policy with Syrup as a set of matching functions between inputs (threads, network packets, network connections) and executors (cores, network sockets, NIC queues) and then deploy it across system layers without modifying their code. Syrup supports multi-tenancy as multiple co-located applications can each safely and securely specify a custom policy. We present several examples of uses of Syrup to define application and workload-specific scheduling policies in a few lines of code, deploy them across the stack, and improve performance up to 8x compared with default policies.},
booktitle = {Proceedings of the ACM SIGOPS 28th Symposium on Operating Systems Principles},
pages = {605-620},
numpages = {16},
keywords = {scheduling, programmability, kernel},
location = {Virtual Event, Germany},
series = {SOSP '21}
}



@inproceedings {perfiso,
  author = {Calin Iorgulescu and Reza Azimi and Youngjin Kwon and Sameh Elnikety and Manoj Syamala and Vivek Narasayya and Herodotos Herodotou and Paulo Tomita and Alex Chen and Jack Zhang and Junhua Wang},
  title = {PerfIso: Performance Isolation for Commercial Latency-Sensitive Services},
  booktitle = {2018 USENIX Annual Technical Conference (USENIX ATC 18)},
  year = {2018},
  isbn = {978-1-939133-01-4},
  address = {Boston, MA},
  url = {https://www.usenix.org/conference/atc18/presentation/iorgulescu},
  publisher = {USENIX Association},
  month = jul
}

@inproceedings{skyloft,
  author = {Jia, Yuekai and Tian, Kaifu and You, Yuyang and Chen, Yu and Chen, Kang},
  title = {Skyloft: A General High-Efficient Scheduling Framework in User Space},
  year = {2024},
  isbn = {9798400712517},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  url = {https://doi.org/10.1145/3694715.3695973},
  doi = {10.1145/3694715.3695973},
  booktitle = {Proceedings of the ACM SIGOPS 30th Symposium on Operating Systems Principles},
  numpages = {15},
  keywords = {operating systems, scheduling, user interrupts},
  location = {Austin, TX, USA},
  series = {SOSP '24}
}

@misc{state-rt-linux,
  author = {Jonathan Corbet},
  howpublished = {online},
  url = {https://lwn.net/Articles/970555/},
  title = {The state of realtime and embedded Linux},
  year = {2024}
}

@misc{rt-in-linux,
  author = {Kevin Purdy},
  howpublished = {online},
  url = {https://arstechnica.com/gadgets/2024/09/real-time-linux-is-officially-part-of-the-kernel-after-decades-of-debate/},
  title = { Real-time Linux is officially part of the kernel after decades of debate },
  year = {2024}
}

@misc{google-speed-matters,
    author = {Jake Brutlag},
    howpublished = {online},
    url = {https://research.google/blog/speed-matters/},
    title = {Speed Matters},
    year={2009}
}

@misc{amz-speed-matters,
    author = {Gigaspaces},
    title = {Amazon Found Every 100ms of Latency Cost them 1 Percent in Sales},
    howpublished = {online},
    url = {https://www.gigaspaces.com/blog/amazon-found-every-100ms-of-latency-cost-them-1-in-sales},
    year={2023}
}